library(lme4)
library(MuMIn)
data = read.csv("psd95.csv")
options(na.action = "na.fail")
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
#data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
#Time1
time1 <- as.data.frame(data[data$Time=="1",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time1)
mod2 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo),REML=TRUE,data=time1)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time1)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time1)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time1)
AIC(mod1,mod2,mod3,mod4,mod5) #mod3 is the best
summary(mod3)
dd3 <- dredge(mod4)
b3 <- get.models(dd3, 1)[[1]]
summary(b3)
confint(b3,level=0.95) #significant interaction between sham and distance, sham and ipsi
confint(b3,level=0.99)
#Time2
time2 <- as.data.frame(data[data$Time=="2",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time2)
mod2 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo),REML=TRUE,data=time2)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time2)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time2)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time2)
AIC(mod1,mod2,mod3,mod4,mod5) #mod4 is the best
summary(mod3)
dd4 <- dredge(mod3)
b4 <- get.models(dd4, 1)[[1]]
summary(b4)
confint(b4,level=0.95) #significant effects of sham, interaction between sham and distance, sham and ipsi, and three of them
confint(b4,level=0.99)
summary(mod3)
dd4 <- dredge(mod3)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time2)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time2)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time2)
AIC(mod1,mod2,mod3,mod4,mod5) #mod3 is the best
summary(mod3)
dd4 <- dredge(mod3)
b4 <- get.models(dd4, 1)[[1]]
summary(b4)
confint(b4,level=0.95) #significant effects of sham, interaction between sham and distance, sham and ipsi, and three of them
confint(b4,level=0.99)
#Time3
time3 <- as.data.frame(data[data$Time=="3",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time3)
mod2 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo),REML=TRUE,data=time3)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time3)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time3)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time3)
AIC(mod1,mod2,mod3,mod4,mod5) #mod2 is the best
summary(mod2)
dd2 <- dredge(mod2)
b2 <- get.models(dd2, 1)[[1]]
summary(b2)
confint(b2,level=0.999) #significant effects of sham, interaction between sham and distance, sham and ipsi, and three of them
confint(b2,level=0.99)
confint(b2,level=0.95)
library(lme4)
library(MuMIn)
data = read.csv("psd95.csv")
options(na.action = "na.fail")
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
#data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
#Time1
time1 <- as.data.frame(data[data$Time=="1",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time1)
mod2 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo),REML=TRUE,data=time1)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time1)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time1)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time1)
AIC(mod1,mod2,mod3,mod4,mod5) #mod3 is the best
summary(mod3)
#Time3
time3 <- as.data.frame(data[data$Time=="3",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time3)
mod2 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo),REML=TRUE,data=time3)
mod3 <- lmer(Intensity~Sham*Ipsi*Distance1+(1+Distance1|AnimalNo),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time3)
mod4 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo/Distance1),control=lmerControl(optimizer ="Nelder_Mead"),REML=TRUE,data=time3)
mod5 <- lmer(Intensity~Sham*Ipsi*Distance1+(1|AnimalNo)+(1|Distance1),REML=TRUE,data=time3)
AIC(mod1,mod2,mod3,mod4,mod5) #mod2 is the best
summary(mod2)
dd2 <- dredge(mod2)
b2 <- get.models(dd2, 1)[[1]]
summary(b2)
confint(b2,level=0.999) #significant effects of sham, interaction between sham and distance, sham and ipsi, and three of them
不
b2
confint(b2,level=0.999) #significant effects of sham, interaction between sham and distance, sham and ipsi, and three of them
library(lme4)
# importin data
data = read.csv("psd95.csv")
library(lme4)
library(lme4)
library(MuMIn)
data = read.csv("psd95.csv")
options(na.action = "na.fail")
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
library(lme4)
library(MuMIn)
data = read.csv("psd95.csv")
options(na.action = "na.fail")
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
#Time1
time1 <- as.data.frame(data[data$Time=="1",])
library(lme4)
# importin data
data = read.csv("psd95.csv")
# this is just to check whether evrything is imported correctly
# You need to specifiy certain variables as factors. R will think that they are on a continous
# Or interval scale, since they are registered as numbers. However, things like "sham"
# are clearly your treatment categories and you need to tell this to the program if you dont use
# letters for coding. The same with Random "FACTORS"
str(data)
head(data)
data$Time <- as.factor(data$Time) #
data$Sham <- as.factor(data$Sham) # this needs to be a factpr since it specifies your treatment categories
data$Ipsi <- as.factor(data$Ipsi) #
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)# also here, the animal are not a continous scale but separate identities
time1 <- as.data.frame(data[data$Time=="1",])
time2 <- as.data.frame(data[data$Time=="2",])
time3 <- as.data.frame(data[data$Time=="3",])
model_Time1 = lmer(Counting ~ Sham*Ipsi*Distance1 + (1|AnimalNo), data = data)
library(lme4)
# importin data
data = read.csv("psd95.csv")
# this is just to check whether evrything is imported correctly
# You need to specifiy certain variables as factors. R will think that they are on a continous
# Or interval scale, since they are registered as numbers. However, things like "sham"
# are clearly your treatment categories and you need to tell this to the program if you dont use
# letters for coding. The same with Random "FACTORS"
str(data)
head(data)
data$Time <- as.factor(data$Time) #
data$Sham <- as.factor(data$Sham) # this needs to be a factpr since it specifies your treatment categories
data$Ipsi <- as.factor(data$Ipsi) #
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)# also here, the animal are not a continous scale but separate identities
time1 <- as.data.frame(data[data$Time=="1",])
time2 <- as.data.frame(data[data$Time=="2",])
time3 <- as.data.frame(data[data$Time=="3",])
model_Time1 = lmer(Intensity ~ Sham*Ipsi*Distance1 + (1|AnimalNo), data = data)
model_Time2 = lmer(Intensity ~ Sham*Ipsi*Distance1 + (1|AnimalNo), data = data)
model_Time3 = lmer(Intensity ~ Sham*Ipsi*Distance1 + (1|AnimalNo), data = data)
library(lattice)
trellis.par.set("background$col" = "white")
# For Time 1 There are some animals which stick out. Based on the scatter, the distance might not have a large impact
xyplot(Intensity ~ Distance1 | AnimalNo, pch = 16, cex = 1.3,
par.strip.text = list(cex = 1.5), scales = list(alternating = F), data=time1)
# For Time 2: very similar here
xyplot(Intensity ~ Distance1 | AnimalNo, pch = 16, cex = 1.3,
par.strip.text = list(cex = 1.5), scales = list(alternating = F), data=time2)
# For Time 3: here might be a slight distance effect for only animal 22...
xyplot(Intensity ~ Distance1 | AnimalNo, pch = 16, cex = 1.3,
par.strip.text = list(cex = 1.5), scales = list(alternating = F), data=time3)
# Time 1: it seems like the interaction model is the best way to describe your data!
m.T1.int <- glmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance1), family=poisson, data = time1)
# Time 1: it seems like the interaction model is the best way to describe your data!
m.T1.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2), family=poisson, data = time1)
, family=poisson,
, family=poisson,
# Time 1: it seems like the interaction model is the best way to describe your data!
m.T1.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time1)
m.T1.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time1)
AIC(m.T1.int,m.T1.add,m.T1.sham,m.T1.ipsi,m.T1.null)#
# Then check whether the model fulfills the assumptions:
# residuals look very good
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
# in glms, you also have to check for over-dispersion
# Dispersion is a factor by which the variance is
# higher/lower than assumed by the model. A rough estimation of checking this is by dividing
# the residual deviance of the model by the degrees of freedom. The value should be between
# 0.6 and 2 (around 1). This was absolutely not fulfilled here and your model was highly
# ober-dispersed. You can also test this
overdisp_fun <- function(model) {
rdf <- df.residual(model)
rp <- residuals(model,type="pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
c(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
}
summary(m.T1.int)
# Time 2: same here, interaction term is important
m.T2.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance1),data = time2)
m.T2.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance1),data = time2)
m.T2.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance1),data = time2)
m.T2.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance1),data = time2)
m.T2.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance1),data = time2)
AIC(m.T2.int,m.T2.add,m.T2.sham,m.T2.ipsi,m.T2.null)# again: the interaction should be kept
plot(m.T2.int) # we should remove point 105 as an outlier
summary(m.T2.int) # stimulationa and the interaction with ipsi are significant. Please ignore the effects of distance in this case
confint(m.T2.int)
library(lme4)
library(MuMIn)
data = read.csv("psd95.csv")
options(na.action = "na.fail")
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
#Time1
time1 <- as.data.frame(data[data$Time=="1",])
mod1 <- lm(Intensity~Sham*Ipsi*Distance1,data=time1)
library(lme4)
# importin data
data = read.csv("psd95.csv")
library(lme4)
# importin data
data = read.csv("psd95.csv")
library(lme4)
# importin data
data = read.csv("psd95.csv")
# this is just to check whether evrything is imported correctly
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time) #
library(lme4)
# importin data
data = read.csv("psd95.csv")
# this is just to check whether evrything is imported correctly
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
View(data)
View(data)
library(lme4)
# importin data
data = read.csv("psd95.csv")
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
time1 <- as.data.frame(data[data$Time=="1",])
time2 <- as.data.frame(data[data$Time=="2",])
time3 <- as.data.frame(data[data$Time=="3",])
# Time 1
m.T1.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time1)
m.T1.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time1)
AIC(m.T1.int,m.T1.add,m.T1.sham,m.T1.ipsi,m.T1.null)#
# Then check whether the model fulfills the assumptions:
# residuals look very good
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
# Then check whether the model fulfills the assumptions:
# residuals look very good
library(lattice)
trellis.par.set("background$col" = "white")
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
qqnorm(residuals(m.T1.int))
# Then check whether the model fulfills the assumptions:
# residuals look very good
library(lattice)
trellis.par.set("background$col" = "white")
par(mar = rep(2, 4))
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
# then you can extract the effect strengths on link scale (log): you can use these to judge stat significance
summary(m.T1.int) #
confint(m.T1.int) # these are the 95% CIs. It corresponds to the p values in the summary () output
time1$Intensity <- time1$Intensity/3738985.2638888895
library(lme4)
# importin data
data = read.csv("psd95.csv")
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
time1 <- as.data.frame(data[data$Time=="1",])
time2 <- as.data.frame(data[data$Time=="2",])
time3 <- as.data.frame(data[data$Time=="3",])
time1$Intensity <- time1$Intensity/3738985.2638888895
time2$Intensity <- time2$Intensity/3908797.791666667
time3$Intensity <- time3$Intensity/3235872.0
# Time 1
m.T1.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time1)
m.T1.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time1)
AIC(m.T1.int,m.T1.add,m.T1.sham,m.T1.ipsi,m.T1.null)# interaction model is the best
# Then check whether the model fulfills the assumptions:
# residuals look very good
library(lattice)
trellis.par.set("background$col" = "white")
par(mar = rep(2, 4))
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
#print confidence interval
summary(m.T1.int)
confint(m.T1.int) # not significant
# Time 2
m.T2.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time2)
m.T2.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time2)
AIC(m.T2.int,m.T2.add,m.T2.sham,m.T2.ipsi,m.T2.null)# again: the interaction should be kept
overdisp_fun(m.T2.int) # we fit the negative binomial version again
plot(m.T2.int) # this looks ok
summary(m.T2.int) # stimulationa and the interaction with ipsi are significant. Please ignore the effects of distance in this case
summary(m.T2.int) # stimulationa and the interaction with ipsi are significant. Please ignore the effects of distance in this case
confident?
q
?confident
??confident
confint(m.T2.int,0.95)
confint(m.T2.int,level=0.95)
confint(m.T2.int,level=0.99)
confint(m.T2.int,level=0.999)
# Time 3: here the interaction is significant too!
m.T3.int <- glmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time3)
m.T3.add <- glmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time3)
# Time 3: here the interaction is significant too!
m.T3.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time3)
m.T3.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time3)
m.T3.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time3)
m.T3.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time3)
m.T3.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time3)
AIC(m.T3.int,m.T3.add,m.T3.sham,m.T3.ipsi,m.T3.null)#
overdisp_fun(m.T3.int) # also here, we assume a negative binomial dist
plot(m.T3.int) # I removed point 338
confint(m.T3.int)
confint(m.T3.int,level=0.99)
confint(m.T3.int,level=0.995)
plot(m.T3.int) # looks good now
confint(m.T3.int,level=0.99)
confint(m.T2.int,level=0.99)
confint(m.T2.int,level=0.95)
confint(m.T2.int,level=0.99)
confint(m.T2.int,level=0.995)
confint(m.T3.int,level=0.99)
95
confint(m.T3.int,level=0.995)
confint(m.T3.int,level=0.95)
confint(m.T3.int,level=0.99)
confint(m.T3.int,level=0.95)
library(lme4)
# importin data
data = read.csv("psd95.csv")
# specifiy certain variables as factors
str(data)
head(data)
data$Time <- as.factor(data$Time)
data$Sham <- as.factor(data$Sham)
data$Ipsi <- as.factor(data$Ipsi)
data$Distance2 <- as.factor(data$Distance2)
data$Distance1 <- as.factor(data$Distance1)
data$AnimalNo <- as.factor(data$AnimalNo)
time1 <- as.data.frame(data[data$Time=="1",])
time2 <- as.data.frame(data[data$Time=="2",])
time3 <- as.data.frame(data[data$Time=="3",])
time1$Intensity <- time1$Intensity/3738985.2638888895
time2$Intensity <- time2$Intensity/3908797.791666667
time3$Intensity <- time3$Intensity/3235872.0
# Time 1
m.T1.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time1)
m.T1.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time1)
m.T1.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time1)
AIC(m.T1.int,m.T1.add,m.T1.sham,m.T1.ipsi,m.T1.null)# interaction model is the best
# Then check whether the model fulfills the assumptions:
# residuals look very good
library(lattice)
trellis.par.set("background$col" = "white")
par(mar = rep(2, 4))
plot(m.T1.int)
qqnorm(residuals(m.T1.int))
qqline(residuals(m.T1.int))
#print confidence interval
summary(m.T1.int)
confint(m.T1.int) # not significant
# Time 2
m.T2.int <- lmer(Intensity ~ Sham * Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.add <- lmer(Intensity ~ Sham + Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.sham <- lmer(Intensity ~ Sham + (1|AnimalNo/Distance2),data = time2)
m.T2.ipsi <- lmer(Intensity ~ Ipsi + (1|AnimalNo/Distance2),data = time2)
m.T2.null  = lmer(Intensity ~ 1 + (1|AnimalNo/Distance2),data = time2)
AIC(m.T2.int,m.T2.add,m.T2.sham,m.T2.ipsi,m.T2.null)# again: the interaction should be kept
plot(m.T2.int) # this looks ok
summary(m.T2.int) # stimulationa and the interaction with ipsi are significant. Please ignore the effects of distance in this case
confint(m.T2.int,level=0.995)
confint(m.T2.int,level=0.95)
confint(m.T3.int,level=0.95)
confint(m.T3.int,level=0.99)
confint(m.T3.int,level=0.995)
confint(m.T3.int,level=0.99)
confint(m.T1.int) # not significant
